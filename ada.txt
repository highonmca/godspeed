-- 1. Create Table
CREATE TABLE table_name (
    column1 DATA_TYPE [CONSTRAINTS],
    column2 DATA_TYPE [CONSTRAINTS],
    ...
);

-- Example:
-- CREATE TABLE employees (
--     id INT,
--     name VARCHAR(100),
--     ...
-- );

-- 2. Insert Data
INSERT ALL
INTO table_name (column1, column2, ...) VALUES (value1, value2, ...)
INTO table_name (column1, column2, ...) VALUES (value1, value2, ...)
...
SELECT * FROM dual;

-- 3. Add Primary Key
ALTER TABLE table_name
ADD CONSTRAINT pk_table_name PRIMARY KEY (column_name);

-- 4. Add Foreign Key
ALTER TABLE child_table
ADD CONSTRAINT fk_child_column FOREIGN KEY (child_column)
REFERENCES parent_table (parent_column);

-- 5. Insert a New Record
INSERT INTO table_name (column1, column2, ...) 
VALUES (value1, value2, ...);

-- 6. Update a Record
UPDATE table_name
SET column_name = new_value
WHERE some_column = some_condition;

-- 7. Basic Select with WHERE
SELECT column1, column2
FROM table_name
WHERE condition;

-- 8. Join Example (Inner Join)
SELECT a.column, b.column
FROM table1 a
JOIN table2 b ON a.id = b.foreign_id;

-- 9. Aggregation with GROUP BY
SELECT column, COUNT(*) AS count
FROM table_name
GROUP BY column;

-- 10. Having Clause (Filter After Grouping)
SELECT column, SUM(amount) AS total
FROM table_name
GROUP BY column
HAVING SUM(amount) > 10000;

-- 11. Transactions
-- (Turn Autocommit OFF before using)
SAVEPOINT before_insert;

INSERT INTO table_name VALUES (...);

ROLLBACK TO before_insert;

-- Optional: COMMIT if needed
-- COMMIT;
