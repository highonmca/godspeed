crash course on oracle db . 
ChatGPT said:
Here’s a crash course on Oracle Database — ideal for getting started quickly with fundamentals, architecture, SQL usage, and administration.

🔹 1. What is Oracle Database?
Oracle Database is a multi-model relational database management system (RDBMS) developed by Oracle Corporation. It supports SQL, PL/SQL, and advanced features like transactions, replication, partitioning, security, and high availability.

🔹 2. Core Concepts
🧱 Architecture
Instance: Set of Oracle background processes and memory structures (SGA, PGA).

Database: The physical files (datafiles, control files, redo logs) on disk.

Tablespace: Logical storage unit (e.g., USERS, SYSTEM).

Datafile: Actual file where data resides.

🧮 SQL Basics (DDL, DML, DCL, TCL)
🛠 DDL – Data Definition Language
sql
Copy
Edit
CREATE TABLE employees (
  emp_id NUMBER PRIMARY KEY,
  name VARCHAR2(50),
  salary NUMBER
);

ALTER TABLE employees ADD hire_date DATE;
DROP TABLE employees;
✍️ DML – Data Manipulation Language
sql
Copy
Edit
INSERT INTO employees VALUES (1, 'John', 50000, SYSDATE);
UPDATE employees SET salary = 55000 WHERE emp_id = 1;
DELETE FROM employees WHERE emp_id = 1;
🔐 DCL – Data Control Language
sql
Copy
Edit
GRANT SELECT, INSERT ON employees TO hr_user;
REVOKE INSERT ON employees FROM hr_user;
🔁 TCL – Transaction Control Language
sql
Copy
Edit
COMMIT;   -- Save changes
ROLLBACK; -- Undo changes
SAVEPOINT mypoint;
🔹 3. PL/SQL (Procedural Language extension for SQL)
sql
Copy
Edit
DECLARE
  v_name employees.name%TYPE;
BEGIN
  SELECT name INTO v_name FROM employees WHERE emp_id = 1;
  DBMS_OUTPUT.PUT_LINE('Employee name: ' || v_name);
END;
Supports procedures, functions, triggers, packages, loops, exception handling.

🔹 4. Oracle Tools

Tool	Purpose
SQL*Plus	CLI for executing SQL and PL/SQL
SQL Developer	GUI to write and run queries
Enterprise Manager	Web-based monitoring/admin
RMAN	Backup and recovery
🔹 5. User and Privileges
sql
Copy
Edit
CREATE USER dev IDENTIFIED BY password;
GRANT CONNECT, RESOURCE TO dev;
ALTER USER dev DEFAULT TABLESPACE users;
🔹 6. Oracle Data Dictionary
USER_TABLES, ALL_TABLES, DBA_TABLES: Get metadata

Example:

sql
Copy
Edit
SELECT table_name FROM user_tables;
🔹 7. Basic Backup and Recovery
RMAN (Recovery Manager): Tool for database backup and recovery

bash
Copy
Edit
rman target /
BACKUP DATABASE;
RESTORE DATABASE;
🔹 8. Joins and Advanced SQL
sql
Copy
Edit
-- INNER JOIN
SELECT e.name, d.dept_name
FROM employees e
JOIN departments d ON e.dept_id = d.dept_id;

-- Subquery
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
🔹 9. Performance Tuning
Use indexes for faster lookups.

sql
Copy
Edit
CREATE INDEX idx_salary ON employees(salary);
Use EXPLAIN PLAN to analyze queries.

🔹 10. Data Export/Import
Data Pump Export/Import:

bash
Copy
Edit
expdp user/pass@db schemas=HR directory=dpdump dumpfile=hr.dmp logfile=exp.log
impdp user/pass@db schemas=HR directory=dpdump dumpfile=hr.dmp logfile=imp.log
Want to Practice?
Install:

Oracle XE (Express Edition) locally

Oracle SQL Developer (GUI)

Or use Live SQL – Oracle’s free browser-based SQL sandbox.

Would you like this in a PDF cheat sheet? Or want to go deeper into PL/SQL, triggers, procedures, or performance tuning?

You said:
elaborate on all these queries
ChatGPT said:
Awesome — let's deep dive into each of the query types from the crash course. I’ll break them down by category and explain their structure, usage, and examples in Oracle SQL.

🛠 1. DDL – Data Definition Language
Used to define or modify database objects like tables, indexes, schemas, etc.

✅ CREATE TABLE
Creates a new table in the database.

sql
Copy
Edit
CREATE TABLE employees (
  emp_id NUMBER PRIMARY KEY,         -- Primary key: Unique identifier
  name VARCHAR2(50) NOT NULL,        -- VARCHAR2 is Oracle's variable-length string type
  salary NUMBER(10, 2),              -- Salary with 2 decimal places
  hire_date DATE DEFAULT SYSDATE     -- Default to current date
);
✅ ALTER TABLE
Changes an existing table (add/modify/drop column, etc.)

sql
Copy
Edit
ALTER TABLE employees ADD department_id NUMBER;
ALTER TABLE employees MODIFY name VARCHAR2(100);
ALTER TABLE employees DROP COLUMN department_id;
✅ DROP TABLE
Deletes a table and all its data permanently.

sql
Copy
Edit
DROP TABLE employees;
✍️ 2. DML – Data Manipulation Language
Used to manipulate data in existing tables.

✅ INSERT INTO
Adds a new row.

sql
Copy
Edit
INSERT INTO employees (emp_id, name, salary, hire_date)
VALUES (1, 'John Doe', 60000, TO_DATE('2023-04-20', 'YYYY-MM-DD'));
✅ UPDATE
Modifies data in existing rows.

sql
Copy
Edit
UPDATE employees
SET salary = salary + 5000
WHERE emp_id = 1;
✅ DELETE
Removes rows that match the condition.

sql
Copy
Edit
DELETE FROM employees
WHERE emp_id = 1;
⚠️ Without a WHERE clause, all rows will be deleted.

🔐 3. DCL – Data Control Language
Used to control access to data in the database.

✅ GRANT
Gives privileges to a user.

sql
Copy
Edit
GRANT SELECT, INSERT ON employees TO dev_user;
-- Allows dev_user to read and insert rows into the 'employees' table
✅ REVOKE
Takes back privileges.

sql
Copy
Edit
REVOKE INSERT ON employees FROM dev_user;
🔁 4. TCL – Transaction Control Language
Used to manage transactions in a session.

✅ COMMIT
Saves all changes made in the current transaction.

sql
Copy
Edit
INSERT INTO employees VALUES (2, 'Jane', 70000, SYSDATE);
COMMIT;
✅ ROLLBACK
Undo changes made since the last COMMIT.

sql
Copy
Edit
DELETE FROM employees WHERE emp_id = 2;
ROLLBACK;
-- Jane is back!
✅ SAVEPOINT
Marks a point in a transaction to roll back to.

sql
Copy
Edit
SAVEPOINT before_update;
UPDATE employees SET salary = 80000 WHERE emp_id = 1;
ROLLBACK TO before_update;
🔄 5. Joins & Subqueries
✅ JOIN
Combines rows from two or more tables based on a related column.

sql
Copy
Edit
SELECT e.name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;
Types of joins:

INNER JOIN: Only matching rows

LEFT OUTER JOIN: All from left + matches from right

RIGHT OUTER JOIN: All from right + matches from left

FULL OUTER JOIN: All rows with matches or NULLs

✅ Subqueries
A query inside another query.

sql
Copy
Edit
-- Find employees who earn more than the average salary
SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
🧪 6. PL/SQL Block Example
sql
Copy
Edit
SET SERVEROUTPUT ON;

DECLARE
  v_name employees.name%TYPE;
BEGIN
  SELECT name INTO v_name
  FROM employees
  WHERE emp_id = 1;

  DBMS_OUTPUT.PUT_LINE('Employee Name: ' || v_name);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No employee found.');
END;
This block:

Declares a variable

Queries employee name by ID

Prints the name

Handles "no data" errors gracefully

📁 7. Data Dictionary Queries
These help explore the database schema.

sql
Copy
Edit
-- All tables in your schema
SELECT table_name FROM user_tables;

-- All columns in the 'employees' table
SELECT column_name, data_type, data_length
FROM user_tab_columns
WHERE table_name = 'EMPLOYEES';
Other useful views:

ALL_TABLES (tables accessible to the user)

DBA_TABLES (admin only, all tables in DB)

🚀 8. Export/Import (Enterprise Use)
✅ Data Pump Export
bash
Copy
Edit
expdp hr/hr@ORCL schemas=HR directory=dpdir dumpfile=hr.dmp logfile=export.log
✅ Data Pump Import
bash
Copy
Edit
impdp hr/hr@ORCL schemas=HR directory=dpdir dumpfile=hr.dmp logfile=import.log
🔎 9. Performance with EXPLAIN PLAN
This shows how Oracle will execute a query.

sql
Copy
Edit
EXPLAIN PLAN FOR
SELECT * FROM employees WHERE salary > 70000;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);
✅ 10. Indexes (for Speed)
sql
Copy
Edit
CREATE INDEX idx_emp_salary ON employees(salary);
-- Helps with fast lookup in WHERE salary > ...
Would you like me to make this a PDF, markdown doc, or continue with Oracle-specific PL/SQL procedures, triggers, or packages next?

You said:
Goa Business School
Goa University
End Semester Assessment Examination — April 2025
Subject: CSA 519 -Database Management Systems Lab (DBMS Lab)
Duration: 2 Hours Maximum Marks: 20 Date: 29/04/2025
SET D
Instructions:
• Make all necessary assumptions and clearly justify them.
• All questions are compulsory.
• Numbers indicated on the right of each question denote the marks allotted.
Submission Guidelines:
• For each question, execute the query and take a screenshot of the solution and its
output.
• Compile all screenshots into a single PDF document.
• Upload the PDF to the submission link provided on Google Classroom
CREATE TABLE account (
account_id INT,
type VARCHAR(20),
branch VARCHAR(100),
balance NUMBER(12,2)
);
CREATE TABLE client (
id INT,
name VARCHAR(100),
address VARCHAR(150),
phone VARCHAR(15),
email VARCHAR(100)
);
CREATE TABLE accountholder (
id INT,
client_id INT,
account_id INT,
start_date DATE,
end_date DATE
);
CREATE TABLE transactions (
id INT,
from_id INT,
to_id INT,
amount NUMBER(10,2),
comment VARCHAR(200)
);
INSERT ALL
INTO account (account_id, type, branch, balance) VALUES (101, 'Saving', 'Mumbai', 50000)
INTO account (account_id, type, branch, balance) VALUES (102, 'Saving', 'Delhi', 75000)
INTO account (account_id, type, branch, balance) VALUES (103, 'Credit', 'Chennai', 20000)
INTO account (account_id, type, branch, balance) VALUES (104, 'Saving', 'Bengaluru', 120000)
INTO account (account_id, type, branch, balance) VALUES (105, 'Credit', 'Hyderabad', 15000)
SELECT * FROM dual;
INSERT ALL
INTO client (id, name, address, phone, email) VALUES (1, 'Rohan Mehra', 'Sector 10, Mumbai',
'9876543210', 'rohan.mehra@example.com')
INTO client (id, name, address, phone, email) VALUES (2, 'Pooja Sharma', 'MG Road, Delhi',
'8765432109', 'pooja.sharma@example.com')
INTO client (id, name, address, phone, email) VALUES (3, 'Arjun Patel', 'Anna Nagar, Chennai',
'7654321098', 'arjun.patel@example.com')
INTO client (id, name, address, phone, email) VALUES (4, 'Neha Singh', 'Whitefield, Bengaluru',
'6543210987', 'neha.singh@example.com')
INTO client (id, name, address, phone, email) VALUES (5, 'Amit Verma', 'Banjara Hills,
Hyderabad', '5432109876', 'amit.verma@example.com')
SELECT * FROM dual;
INSERT ALL
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (1, 1, 101,
TO_DATE('2020-01-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (2, 2, 102,
TO_DATE('2021-03-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (3, 3, 103,
TO_DATE('2021-05-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (4, 4, 104,
TO_DATE('2022-01-15', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (5, 5, 105,
TO_DATE('2022-06-10', 'YYYY-MM-DD'), NULL)
SELECT * FROM dual;
INSERT ALL
INTO transactions (id, from_id, to_id, amount, comment) VALUES (1, 101, 102, 5000, 'Rent
Payment')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (2, 102, 103, 10000, 'Loan
EMI')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (3, 104, 101, 15000, 'Salary
Transfer')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (4, 105, 104, 7000, 'Credit
Card Payment')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (5, 103, 105, 8000, 'Loan
Disbursement')
SELECT * FROM dual;
Q1.
Q2.
Q3.
Q4.
Q5.
Q6.
Q7.
Q8.
Q9.
Write a query to add a primary key constraint to the account table on
the column account_id.
Write a query to add a foreign key constraint on accountholder table
for client_id referencing client(id).
Write a query to add a foreign key constraint on transactions table for
from_id referencing account(account_id).
Insert a new client "Deepak Kulkarni" with a savings account balance
of ₹90,000 in the "Pune" branch.
Update the balance of account ID 103 by adding ₹5,000.
Display all account holders with their client names and balances.
List all transactions where amount transferred is greater than ₹8,000.
List names of clients who initiated transactions along with the amount
sent.
List names of clients who received money along with transaction
amount.
0.5 Marks
0.5 Marks
1 Marks
0.5 Marks
0.5 Marks
0.5 Marks
0.5 Marks
2 Marks
2 Marks
Q10.
Q11.
Q12.
Q13.
Q14.
Q15.
Display client names, their account type, and balance where balance is
above ₹50,000.
Find all clients and accounts where account type is "Credit".
Find total number of transactions made by each from_id.
Find total amount transferred from each account.
List accounts that have transferred more than ₹10,000 in total.
Find total transaction amount received by each account having
received more than ₹15,000.
---------------------------------------All The Best-----------------------------------------
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks

solve
ChatGPT said:
Updated saved memory
Here’s the complete SQL solution for your DBMS Lab End Semester Assessment – Set D. For each question, you can execute the queries in Oracle SQL Developer or any tool you’re using, and take screenshots of the output to compile into a PDF.

✅ Q1. Add primary key to account table
sql
Copy
Edit
ALTER TABLE account
ADD CONSTRAINT pk_account PRIMARY KEY (account_id);
✅ Q2. Add foreign key to accountholder for client_id
sql
Copy
Edit
ALTER TABLE accountholder
ADD CONSTRAINT fk_accountholder_client FOREIGN KEY (client_id)
REFERENCES client(id);
✅ Q3. Add foreign key to transactions for from_id
sql
Copy
Edit
ALTER TABLE transactions
ADD CONSTRAINT fk_transactions_from FOREIGN KEY (from_id)
REFERENCES account(account_id);
✅ Q4. Insert new client “Deepak Kulkarni” with Savings Account in Pune (₹90,000)
sql
Copy
Edit
-- Step 1: Insert new client
INSERT INTO client (id, name, address, phone, email)
VALUES (6, 'Deepak Kulkarni', 'FC Road, Pune', '9123456780', 'deepak.kulkarni@example.com');

-- Step 2: Insert new account
INSERT INTO account (account_id, type, branch, balance)
VALUES (106, 'Saving', 'Pune', 90000);

-- Step 3: Link with accountholder
INSERT INTO accountholder (id, client_id, account_id, start_date, end_date)
VALUES (6, 6, 106, SYSDATE, NULL);
✅ Q5. Update balance of account ID 103 by ₹5,000
sql
Copy
Edit
UPDATE account
SET balance = balance + 5000
WHERE account_id = 103;
✅ Q6. Display all account holders with their client names and balances
sql
Copy
Edit
SELECT c.name, a.account_id, a.balance
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id;
✅ Q7. List all transactions with amount > ₹8,000
sql
Copy
Edit
SELECT * 
FROM transactions
WHERE amount > 8000;
✅ Q8. Names of clients who initiated transactions with amount
sql
Copy
Edit
SELECT c.name AS sender_name, t.amount
FROM transactions t
JOIN accountholder ah ON t.from_id = ah.account_id
JOIN client c ON ah.client_id = c.id;
✅ Q9. Names of clients who received money with amount
sql
Copy
Edit
SELECT c.name AS receiver_name, t.amount
FROM transactions t
JOIN accountholder ah ON t.to_id = ah.account_id
JOIN client c ON ah.client_id = c.id;
✅ Q10. Clients with balance > ₹50,000 and account type
sql
Copy
Edit
SELECT c.name, a.type, a.balance
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id
WHERE a.balance > 50000;
✅ Q11. Clients and accounts where account type is “Credit”
sql
Copy
Edit
SELECT c.name, a.account_id, a.type
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id
WHERE a.type = 'Credit';
✅ Q12. Total number of transactions by each from_id
sql
Copy
Edit
SELECT from_id, COUNT(*) AS total_transactions
FROM transactions
GROUP BY from_id;
✅ Q13. Total amount transferred from each account
sql
Copy
Edit
SELECT from_id, SUM(amount) AS total_transferred
FROM transactions
GROUP BY from_id;
✅ Q14. Accounts that transferred more than ₹10,000 in total
sql
Copy
Edit
SELECT from_id
FROM transactions
GROUP BY from_id
HAVING SUM(amount) > 10000;
✅ Q15. Total transaction amount received by each account (if > ₹15,000)
sql
Copy
Edit
SELECT to_id, SUM(amount) AS total_received
FROM transactions
GROUP BY to_id
HAVING SUM(amount) > 15000;
📌 Next Steps:

Run each query in Oracle SQL Developer or LiveSQL.

Take a screenshot of both the SQL and output.

Compile the screenshots in a single PDF (you can use Word or a PDF maker).

Submit it to Google Classroom.

Would you like a printable PDF version of these queries formatted nicely with headings and space for screenshots?

You said:
solve from creating tables
ChatGPT said:
Here’s the complete solution starting from creating tables, inserting data, and then solving all the queries Q1–Q15 for your CSA 519 – DBMS Lab, Set D. You can execute these sequentially in Oracle SQL (e.g., Oracle LiveSQL or SQL Developer).

🔧 1. Creating Tables
sql
Copy
Edit
CREATE TABLE account (
    account_id INT,
    type VARCHAR(20),
    branch VARCHAR(100),
    balance NUMBER(12,2)
);

CREATE TABLE client (
    id INT,
    name VARCHAR(100),
    address VARCHAR(150),
    phone VARCHAR(15),
    email VARCHAR(100)
);

CREATE TABLE accountholder (
    id INT,
    client_id INT,
    account_id INT,
    start_date DATE,
    end_date DATE
);

CREATE TABLE transactions (
    id INT,
    from_id INT,
    to_id INT,
    amount NUMBER(10,2),
    comment VARCHAR(200)
);
📥 2. Inserting Data
sql
Copy
Edit
-- Insert into account
INSERT ALL
INTO account (account_id, type, branch, balance) VALUES (101, 'Saving', 'Mumbai', 50000)
INTO account (account_id, type, branch, balance) VALUES (102, 'Saving', 'Delhi', 75000)
INTO account (account_id, type, branch, balance) VALUES (103, 'Credit', 'Chennai', 20000)
INTO account (account_id, type, branch, balance) VALUES (104, 'Saving', 'Bengaluru', 120000)
INTO account (account_id, type, branch, balance) VALUES (105, 'Credit', 'Hyderabad', 15000)
SELECT * FROM dual;

-- Insert into client
INSERT ALL
INTO client (id, name, address, phone, email) VALUES (1, 'Rohan Mehra', 'Sector 10, Mumbai', '9876543210', 'rohan.mehra@example.com')
INTO client (id, name, address, phone, email) VALUES (2, 'Pooja Sharma', 'MG Road, Delhi', '8765432109', 'pooja.sharma@example.com')
INTO client (id, name, address, phone, email) VALUES (3, 'Arjun Patel', 'Anna Nagar, Chennai', '7654321098', 'arjun.patel@example.com')
INTO client (id, name, address, phone, email) VALUES (4, 'Neha Singh', 'Whitefield, Bengaluru', '6543210987', 'neha.singh@example.com')
INTO client (id, name, address, phone, email) VALUES (5, 'Amit Verma', 'Banjara Hills, Hyderabad', '5432109876', 'amit.verma@example.com')
SELECT * FROM dual;

-- Insert into accountholder
INSERT ALL
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (1, 1, 101, TO_DATE('2020-01-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (2, 2, 102, TO_DATE('2021-03-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (3, 3, 103, TO_DATE('2021-05-01', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (4, 4, 104, TO_DATE('2022-01-15', 'YYYY-MM-DD'), NULL)
INTO accountholder (id, client_id, account_id, start_date, end_date) VALUES (5, 5, 105, TO_DATE('2022-06-10', 'YYYY-MM-DD'), NULL)
SELECT * FROM dual;

-- Insert into transactions
INSERT ALL
INTO transactions (id, from_id, to_id, amount, comment) VALUES (1, 101, 102, 5000, 'Rent Payment')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (2, 102, 103, 10000, 'Loan EMI')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (3, 104, 101, 15000, 'Salary Transfer')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (4, 105, 104, 7000, 'Credit Card Payment')
INTO transactions (id, from_id, to_id, amount, comment) VALUES (5, 103, 105, 8000, 'Loan Disbursement')
SELECT * FROM dual;
🧠 3. Queries Q1 to Q15
✅ Q1. Add primary key to account
sql
Copy
Edit
ALTER TABLE account
ADD CONSTRAINT pk_account PRIMARY KEY (account_id);
✅ Q2. Add foreign key to accountholder (client_id)
sql
Copy
Edit
ALTER TABLE accountholder
ADD CONSTRAINT fk_ah_client FOREIGN KEY (client_id) REFERENCES client(id);
✅ Q3. Add foreign key to transactions (from_id)
sql
Copy
Edit
ALTER TABLE transactions
ADD CONSTRAINT fk_txn_from FOREIGN KEY (from_id) REFERENCES account(account_id);
✅ Q4. Insert new client Deepak Kulkarni
sql
Copy
Edit
INSERT INTO client VALUES (6, 'Deepak Kulkarni', 'FC Road, Pune', '9123456780', 'deepak.kulkarni@example.com');
INSERT INTO account VALUES (106, 'Saving', 'Pune', 90000);
INSERT INTO accountholder VALUES (6, 6, 106, SYSDATE, NULL);
✅ Q5. Update account ID 103 by ₹5000
sql
Copy
Edit
UPDATE account SET balance = balance + 5000 WHERE account_id = 103;
✅ Q6. Account holders with client names and balances
sql
Copy
Edit
SELECT c.name, a.account_id, a.balance
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id;
✅ Q7. Transactions > ₹8000
sql
Copy
Edit
SELECT * FROM transactions WHERE amount > 8000;
✅ Q8. Clients who initiated transactions with amount
sql
Copy
Edit
SELECT c.name AS sender, t.amount
FROM transactions t
JOIN accountholder ah ON t.from_id = ah.account_id
JOIN client c ON ah.client_id = c.id;
✅ Q9. Clients who received money with amount
sql
Copy
Edit
SELECT c.name AS receiver, t.amount
FROM transactions t
JOIN accountholder ah ON t.to_id = ah.account_id
JOIN client c ON ah.client_id = c.id;
✅ Q10. Clients with account type and balance > ₹50,000
sql
Copy
Edit
SELECT c.name, a.type, a.balance
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id
WHERE a.balance > 50000;
✅ Q11. Credit account holders
sql
Copy
Edit
SELECT c.name, a.account_id, a.type
FROM client c
JOIN accountholder ah ON c.id = ah.client_id
JOIN account a ON ah.account_id = a.account_id
WHERE a.type = 'Credit';
✅ Q12. Total transactions from each account
sql
Copy
Edit
SELECT from_id, COUNT(*) AS txn_count
FROM transactions
GROUP BY from_id;
✅ Q13. Total amount transferred by each account
sql
Copy
Edit
SELECT from_id, SUM(amount) AS total_amount
FROM transactions
GROUP BY from_id;
✅ Q14. Accounts that transferred more than ₹10,000
sql
Copy
Edit
SELECT from_id
FROM transactions
GROUP BY from_id
HAVING SUM(amount) > 10000;
✅ Q15. Accounts receiving more than ₹15,000
sql
Copy
Edit
SELECT to_id, SUM(amount) AS received
FROM transactions
GROUP BY to_id
HAVING SUM(amount) > 15000;
Would you like this as a well-formatted PDF with placeholders for screenshots for submission? I can generate that for you.

You said:
Goa Business School
Goa University
End Semester Assessment Examination — April 2025
Subject: CSA 519 -Database Management Systems Lab (DBMS Lab)
Duration: 2 Hours Maximum Marks: 20 Date: 29/04/2025
SET C
Instructions:
• Make all necessary assumptions and clearly justify them.
• All questions are compulsory.
• Numbers indicated on the right of each question denote the marks allotted.
Submission Guidelines:
• For each question, execute the query and take a screenshot of the solution and its
output.
• Compile all screenshots into a single PDF document.
• Upload the PDF to the submission link provided on Google Classroom
CREATE TABLE employees (
id INT,
name VARCHAR(100),
address VARCHAR(150),
location VARCHAR(50),
phone VARCHAR(15),
email VARCHAR(100)
);
INSERT ALL
INTO employees (id, name, address, location, phone, email)
VALUES (1, 'Amit Desai', '12 Green Street', 'Mumbai', '9876543210',
'amit.desai@example.com')
INTO employees (id, name, address, location, phone, email)
VALUES (2, 'Neha Sharma', '45 Park Avenue', 'Delhi', '8765432109',
'neha.sharma@example.com')
INTO employees (id, name, address, location, phone, email)
VALUES (3, 'Rajiv Kumar', '78 Hill Road', 'Bengaluru', '7654321098',
'rajiv.kumar@example.com')
INTO employees (id, name, address, location, phone, email)
VALUES (4, 'Sneha Iyer', '21 River Drive', 'Chennai', '6543210987',
'sneha.iyer@example.com')
INTO employees (id, name, address, location, phone, email)
VALUES (5, 'Vikram Rao', '9 City Center', 'Hyderabad', '5432109876',
'vikram.rao@example.com')
SELECT * FROM dual;
CREATE TABLE manages (
manager_id INT,
employee_id INT,
start_date DATE,
end_date DATE
);
INSERT ALL
INTO manages (manager_id, employee_id, start_date, end_date)
VALUES (1, 2, TO_DATE('2022-01-01', 'YYYY-MM-DD'), TO_DATE('2022-12-31', 'YYYY-MM-
DD'))
INTO manages (manager_id, employee_id, start_date, end_date)
VALUES (1, 3, TO_DATE('2022-02-15', 'YYYY-MM-DD'), TO_DATE('2022-12-31', 'YYYY-MM-
DD'))
INTO manages (manager_id, employee_id, start_date, end_date)
VALUES (2, 4, TO_DATE('2022-03-01', 'YYYY-MM-DD'), TO_DATE('2023-03-01', 'YYYY-MM-
DD'))
INTO manages (manager_id, employee_id, start_date, end_date)
VALUES (2, 5, TO_DATE('2022-04-01', 'YYYY-MM-DD'), TO_DATE('2023-04-01', 'YYYY-MM-
DD'))
SELECT * FROM dual;
CREATE TABLE works_on (
project_id INT,
employee_id INT,
works_as VARCHAR(50)
);
INSERT ALL
INTO works_on (project_id, employee_id, works_as)
VALUES (101, 2, 'Developer')
INTO works_on (project_id, employee_id, works_as)
VALUES (102, 3, 'Tester')
INTO works_on (project_id, employee_id, works_as)
VALUES (103, 4, 'HR')
INTO works_on (project_id, employee_id, works_as)
VALUES (101, 5, 'Developer')
INTO works_on (project_id, employee_id, works_as)
VALUES (102, 1, 'Manager')
SELECT * FROM dual;
Q1.
Q2.
Q3.
Q4.
Q5.
Q6.
Q7.
Q8.
Q9.
Q10.
Q11.
Q12.
Q13.
Q14.
Q15.
Add a primary key on id column of employees table.
Add foreign keys:
• manager_id and employee_id in manages
• employee_id in works_on
Insert a new employee into the employees table.
Update phone number of 'Vikram Rao' to '9999999999'.
Display names and emails of all employees located in 'Delhi'.
List employees who work as 'Developer'.
List employees along with their manager names.
Display employee name, project ID and works_as.
Find names of employees who are managed by 'Amit Desai'.
List managers who are managing more than one employee.
Find number of employees in each location.
List job roles and number of employees in each role.
Find locations having more than 1 employee.
List projects and how many employees are working on each project.
Insert a new employee, but rollback the transaction instead of
committing.
---------------------------------------All The Best-----------------------------------------
0.5 Marks
0.5 Marks
1 Marks
0.5 Marks
0.5 Marks
0.5 Marks
0.5 Marks
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks
2 Marks

solve this end to end
ChatGPT said:
Updated saved memory
Here is the complete solution to SET C of the CSA 519 - DBMS Lab Exam, including table creation, data insertion, and solutions to all 15 queries using Oracle SQL syntax:

🧱 TABLE CREATION & INSERTION
sql
Copy
Edit
-- Creating employees table
CREATE TABLE employees (
  id INT,
  name VARCHAR(100),
  address VARCHAR(150),
  location VARCHAR(50),
  phone VARCHAR(15),
  email VARCHAR(100)
);

-- Inserting employees
INSERT ALL
INTO employees VALUES (1, 'Amit Desai', '12 Green Street', 'Mumbai', '9876543210', 'amit.desai@example.com')
INTO employees VALUES (2, 'Neha Sharma', '45 Park Avenue', 'Delhi', '8765432109', 'neha.sharma@example.com')
INTO employees VALUES (3, 'Rajiv Kumar', '78 Hill Road', 'Bengaluru', '7654321098', 'rajiv.kumar@example.com')
INTO employees VALUES (4, 'Sneha Iyer', '21 River Drive', 'Chennai', '6543210987', 'sneha.iyer@example.com')
INTO employees VALUES (5, 'Vikram Rao', '9 City Center', 'Hyderabad', '5432109876', 'vikram.rao@example.com')
SELECT * FROM dual;

-- Creating manages table
CREATE TABLE manages (
  manager_id INT,
  employee_id INT,
  start_date DATE,
  end_date DATE
);

-- Inserting into manages
INSERT ALL
INTO manages VALUES (1, 2, TO_DATE('2022-01-01','YYYY-MM-DD'), TO_DATE('2022-12-31','YYYY-MM-DD'))
INTO manages VALUES (1, 3, TO_DATE('2022-02-15','YYYY-MM-DD'), TO_DATE('2022-12-31','YYYY-MM-DD'))
INTO manages VALUES (2, 4, TO_DATE('2022-03-01','YYYY-MM-DD'), TO_DATE('2023-03-01','YYYY-MM-DD'))
INTO manages VALUES (2, 5, TO_DATE('2022-04-01','YYYY-MM-DD'), TO_DATE('2023-04-01','YYYY-MM-DD'))
SELECT * FROM dual;

-- Creating works_on table
CREATE TABLE works_on (
  project_id INT,
  employee_id INT,
  works_as VARCHAR(50)
);

-- Inserting into works_on
INSERT ALL
INTO works_on VALUES (101, 2, 'Developer')
INTO works_on VALUES (102, 3, 'Tester')
INTO works_on VALUES (103, 4, 'HR')
INTO works_on VALUES (101, 5, 'Developer')
INTO works_on VALUES (102, 1, 'Manager')
SELECT * FROM dual;
✅ QUERY SOLUTIONS
Q1. Add a primary key on id of employees

sql
Copy
Edit
ALTER TABLE employees ADD CONSTRAINT pk_emp_id PRIMARY KEY (id);
Q2. Add foreign key constraints

sql
Copy
Edit
ALTER TABLE manages 
ADD CONSTRAINT fk_manager FOREIGN KEY (manager_id) REFERENCES employees(id);

ALTER TABLE manages 
ADD CONSTRAINT fk_employee FOREIGN KEY (employee_id) REFERENCES employees(id);

ALTER TABLE works_on 
ADD CONSTRAINT fk_works_emp FOREIGN KEY (employee_id) REFERENCES employees(id);
Q3. Insert a new employee

sql
Copy
Edit
INSERT INTO employees VALUES (6, 'Deepika Rane', '88 Sunset Blvd', 'Pune', '9871234567', 'deepika.rane@example.com');
Q4. Update phone number of Vikram Rao

sql
Copy
Edit
UPDATE employees 
SET phone = '9999999999' 
WHERE name = 'Vikram Rao';
Q5. Names and emails of employees in Delhi

sql
Copy
Edit
SELECT name, email 
FROM employees 
WHERE location = 'Delhi';
Q6. Employees who work as Developer

sql
Copy
Edit
SELECT e.name 
FROM employees e 
JOIN works_on w ON e.id = w.employee_id 
WHERE w.works_as = 'Developer';
Q7. Employees with their manager names

sql
Copy
Edit
SELECT e.name AS employee_name, m.name AS manager_name
FROM employees e
JOIN manages mg ON e.id = mg.employee_id
JOIN employees m ON mg.manager_id = m.id;
Q8. Employee name, project ID, and works_as

sql
Copy
Edit
SELECT e.name, w.project_id, w.works_as
FROM employees e
JOIN works_on w ON e.id = w.employee_id;
Q9. Employees managed by 'Amit Desai'

sql
Copy
Edit
SELECT e.name 
FROM employees e
JOIN manages m ON e.id = m.employee_id
WHERE m.manager_id = (SELECT id FROM employees WHERE name = 'Amit Desai');
Q10. Managers managing more than one employee

sql
Copy
Edit
SELECT m.manager_id, e.name AS manager_name, COUNT(*) AS emp_count
FROM manages m
JOIN employees e ON m.manager_id = e.id
GROUP BY m.manager_id, e.name
HAVING COUNT(*) > 1;
Q11. Number of employees in each location

sql
Copy
Edit
SELECT location, COUNT(*) AS emp_count
FROM employees
GROUP BY location;
Q12. Job roles and number of employees in each

sql
Copy
Edit
SELECT works_as, COUNT(*) AS emp_count
FROM works_on
GROUP BY works_as;
Q13. Locations with more than 1 employee

sql
Copy
Edit
SELECT location
FROM employees
GROUP BY location
HAVING COUNT(*) > 1;
Q14. Projects and how many employees work on each

sql
Copy
Edit
SELECT project_id, COUNT(*) AS employee_count
FROM works_on
GROUP BY project_id;
Q15. Insert and rollback

sql
Copy
Edit
SAVEPOINT before_insert;

INSERT INTO employees VALUES (7, 'Test User', 'Dummy Street', 'TestCity', '0000000000', 'test@example.com');

ROLLBACK TO before_insert;
Let me know if you'd like a PDF with formatted queries and expected output structure, or help with executing this in SQL Developer or Oracle Live.







You said:
SAVEPOINT before_insert;

INSERT INTO employees VALUES (7, 'Test User', 'Dummy Street', 'TestCity', '0000000000', 'test@example.com');

ROLLBACK TO before_insert;

will  this work if autocomitt is on.


ChatGPT said:
No, the following code will not work as expected if autocommit is ON:

sql
Copy
Edit
SAVEPOINT before_insert;

INSERT INTO employees VALUES (7, 'Test User', 'Dummy Street', 'TestCity', '0000000000', 'test@example.com');

ROLLBACK TO before_insert;
❗ Why?
When autocommit is ON, every individual SQL statement is automatically committed immediately after execution. That means:

The INSERT statement is committed as soon as it executes.

The ROLLBACK TO SAVEPOINT becomes invalid because the transaction has already been committed, and the savepoint no longer exists.

✅ What you should do:
To use SAVEPOINT and ROLLBACK effectively, autocommit must be turned OFF.

🔧 In Oracle SQL Developer:
Go to: Tools > Preferences > Database > Worksheet

Uncheck Autocommit (or set Autocommit to OFF in the toolbar)

💡 Alternative (if you can’t disable autocommit):
Use a full transaction with ROLLBACK only:

sql
Copy
Edit
-- Start transaction implicitly
INSERT INTO employees VALUES (7, 'Test User', 'Dummy Street', 'TestCity', '0000000000', 'test@example.com');

ROLLBACK;  -- Rolls back the entire uncommitted transaction
Let me know what environment you're using (SQL Developer, Oracle Live SQL, etc.), and I can guide you specifically on how to disable autocommit.
